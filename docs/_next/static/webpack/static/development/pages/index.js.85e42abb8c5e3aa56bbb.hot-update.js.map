{"version":3,"file":"static/webpack/static/development/pages/index.js.85e42abb8c5e3aa56bbb.hot-update.js","sources":["webpack:///./slide-deck/Deck/utils.js","webpack:///./slide-deck/Slide.jsx"],"sourcesContent":["export const updateURL = (prevState, state, router) => {\n  if (prevState.slideIndex !== state.slideIndex) {\n    router.replace(`${router.pathname}?slide=${state.slideIndex}`);\n  }\n};\n\nexport const checkForStateChange = (currState, nextState) => {\n  const index = currState.slideIndex !== nextState.slideIndex;\n  const scale = currState.scale !== nextState.scale;\n  const animation = currState.animation !== nextState.animation;\n  return scale || index || animation;\n};\n\nexport const checkForNewAnimation = (prevState, currState, callback) => {\n  if (!prevState.animaiton && currState.animation) {\n    window.setTimeout(callback, 600);\n  }\n};\n\nexport const addKeysToSlides = slides => slides.map((slide, i) => ({ ...slide, key: i }));\n\nexport const getScale = ({ currentTarget: { innerWidth, innerHeight } }, template) => {\n  const { width, height } = template.globals;\n  const scaleX = innerWidth / width;\n  const scaleY = innerHeight / height;\n  return Math.min(scaleX, scaleY);\n};\n","import { Component } from 'react';\nimport { exact, oneOf, string, number, objectOf, bool, object, func } from 'prop-types';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  animation-duration: 600ms;\n  background-color: var(--slide-background);\n\n  > div {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nclass Slide extends Component {\n  constructor(props) {\n    super(props);\n    console.log('Created', props.data.key);\n  }\n\n  componentWillUnmount() {\n    console.log('Unmounted', this.props.data.key);\n  }\n\n  render() {\n    const { type, animation, template, data } = this.props;\n    const animationType = animation && animation.type;\n    const animationDiretions = animation && animation.direction;\n    const className = classnames(\n      `slide-${type}`,\n      { animated: !!animation },\n      { [`animation-${animationType}`]: animationType },\n      { [`direction-${animationDiretions}`]: animationDiretions },\n    );\n    const Component = template[data.template];\n    console.log('Slide render');\n\n    return (\n      <Container type={type} className={className}>\n        <Component {...data.content} />\n      </Container>\n    );\n  }\n}\n\nSlide.propTypes = {\n  animation: exact({\n    direction: oneOf(['next', 'prev']).isRequired,\n    type: oneOf(['horizontal', 'vertical']).isRequired,\n  }),\n  data: exact({\n    animation: exact({\n      type: string.isRequired,\n    }),\n    content: object.isRequired,\n    key: number.isRequired,\n    template: string.isRequired,\n  }),\n  template: objectOf(func).isRequired,\n  type: oneOf(['prev', 'curr', 'next']).isRequired,\n  visible: bool.isRequired,\n};\n\nexport default Slide;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAiBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAAA;AAIA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA5BA;AACA;AA8BA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AADA;AAGA;AACA;AACA;AANA;AAQA;AACA;AACA;AAfA;AAkBA;;;;A","sourceRoot":""}